Spring声明式事务的支持
  编程式事务：在业务代码中添加事务控制代码
  声明式事务：通过xml或注解配置的方式达到事务控制的目的


事务的概念：
  A给B转账:A-  B+, 涉及到两条sql语句同时执行，那么这一波操作，要么都成功，要么都失败。就叫做一个事务
  事务四大特征：
    原子性：从操作的角度，要么都成功，要么都失败
    一致性：从数据的角度来说的，A有1000,B有1000,转账后A+B必须为2000
    隔离性：防止脏读
    持久性：事务一旦被提交，它对数据库的改变就是永久的，即使数据库出现故障也不应该对其有任何影响
  不考虑隔离级别会出现以下情况：具体看教材
    脏读 不可重复读 虚读

  数据库共定义了四种隔离级别:
    Serializable(串行化):可避免脏读、不可重复读、虚读情况的发生。(串行化) 最高
    Repeatable read(可重复读):可避免脏读、不可重复读情况的发生。(幻读有可能发生) 第二  （该机制下会对要update的行进行加锁）
    Read committed(读已提交):可避免脏读情况发生。不可重复读和幻读一定会发生。 第三
    Read uncommitted(读未提交):最低级别，以上情况均无法保证。(读未提交) 最低

    以下使用默认的就行：
    MySQL的默认隔离级别是:REPEATABLE READ
    查询当前使用的隔离级别: select @@tx_isolation;
    设置MySQL事务的隔离级别: set session transaction isolation level xxx; (设置的是当前 mysql连接会话的，并不是永久改变的)

    A调用B，我们站在B的⻆度来观察来定义事务的传播行为

    PROPAGATION_REQUIRED
    如果当前没有事务，就新建一个事务，如果已经存在一个事务中， 加入到这个事务中。这是最常⻅的选择。

    PROPAGATION_SUPPORTS
    支持当前事务，如果当前没有事务，就以非事务方式执行。

javacode01:
Spring中事务的API,基于Mybatis或Hibernate, 原生的jdbc无法使用Spring中事务的API
  这里主要使用Mybatis
  Mybatis: DataSourceTransactionManager 归根结底是横切逻辑代码，声明式事务要做的就是使用Aop(动态代理)来将事务控制逻辑织入到业务代码
  使用：
    导包：
    <!--引入spring声明式事务相关-->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-jdbc</artifactId>
      <version>5.1.12.RELEASE</version>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-tx</artifactId>
      <version>5.1.12.RELEASE</version>
    </dependency>
    <!--spring aop的jar包支持-->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-aop</artifactId>
      <version>5.1.12.RELEASE</version>
    </dependency>
    <!--第三方的aop框架aspectj的jar-->
    <dependency>
      <groupId>org.aspectj</groupId>
      <artifactId>aspectjweaver</artifactId>
      <version>1.8.13</version>
    </dependency>
  具体代码实现看：com.lagou.edu.dao.impl.JdbcTemplateDaoImpl
  配置spring声明式事务
   纯XML模式 ：  javacode01
    xml中：
      xmlns:tx="http://www.springframework.org/schema/tx"
   XML+注解： javacode02
    xml:
        <!--声明式事务的注解驱动-->
        <tx:annotation-driven transaction-manager="transactionManager"/>
    类：
        com.lagou.edu.service.impl.TransferServiceImpl类上加注解：@Transactional
        当然也可以将@Transactional加在方法上
   纯注解：自己看教材





