Spring IOC 源码分析
    01.下载spring源码：https://github.com/spring-projects/spring-framework/tree/5.1.x
    02.安装gradle(类似于maven) mac: https://www.jianshu.com/p/aeb9f39b8732
    03.将下载好的源码导入到idea中 - gradle的形式
好处：提⾼培养代码架构思维、深⼊理解框架
原则：
    定焦原则：抓主线
    宏观原则：站在上帝视⻆，关注源码结构和业务流程（淡化具体某⾏代码的编写细节）
读源码的⽅法和技巧：
    断点（观察调⽤栈）
    反调（Find Usages）
    经验（spring框架中doXXX，做具体处理的地⽅）


IOC容器是一组组件和过程的集合，包括BeanFactory，map单例池，BeanPostProcessor等以及之间的协作流程


IOC容器是创建管理Bean对象的，Spring Bean是有生命周期的
以下Bean的执行：
构造器执行，初始化方法执行，普通bean后置处理器的before/after方法：AbstractApplicationContext#refresh#finishBeanFactoryInitialization
Bean工厂后置处理器初始化执化，执行方法 （day09/pojo/MyBeanFactoryPostProcessor）：AbstractApplicationContext#refresh#invokeBeanFactoryPostProcessors
普通bean的后置处理器的初始化 （day09/pojo/MyBeanPostProcessor）bstractApplicationContext#refresh#registerBeanPostProcessors

ApplicationContext applicationContext = new ClassPathXmlApplicationContext("applicationContext.xml");
Result result = applicationContext.getBean(Result.class);

spring只能解决以下的循环依赖：看图：spring循环依赖解决.png
单例并通过set方法/@Autowired





SpringAOP应用：
  在不改变原有业务逻辑的情况下，增强横切逻辑，横切逻辑代码往往是权限校验代码、日志代码、事物控制代码、性能监控代码
  连接点：方法开始时、结束时、正常运行完毕时、异常时等特殊的时机点。连接点是一种候选点
  切入点：指定APO思想想要影响的具体方法是哪些，描述感兴趣的方法
  增强： 1.增强横切逻辑；2.方位点(在某一些连接点上加入横切逻辑，这些连接点就是方位点，描述的是具体的特殊时机)
  切面：是对上述概念的一个综合。切面 = 切入点 + 增强
                                = 切入点(锁定方法) + 方位点(锁定方法中的特殊时机) + 横切逻辑
  众多的概念，目的就是为了锁定要在哪个地方插入什么横切逻辑代码

  使用：
    1.纯XM形式 javacode02：xml配置的aop,必须使用xml形式的bean!!!!!!!!!
      需求：把打印日志的逻辑织入到目标方法的特定位置(service层的transfer方法)
      导包：
        <!-- spring AOP的jar包支持 -->
        <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-aop</artifactId>
          <version>5.1.12.RELEASE</version>
        </dependency>
        <!-- 第三方aop框架 -->
        <dependency>
          <groupId>org.aspectj</groupId>
          <artifactId>aspectjweaver</artifactId>
          <version>1.8.13</version>
        </dependency>
      编辑xml配置文件
        beans标签加：
          xmlns:aop="http://www.springframework.org/schema/aop"
          http://www.springframework.org/schema/aop
          https://www.springframework.org/schema/aop/spring-aop.xsd
        具体配置见：applicationContext.xml
    2.XML+注解 javacode03：一定要开启注解扫描：<context:component-scan base-package="com.lagou.edu"/>
        @Component
        @Aspect //相当于xml中的<aop:aspect
        public class LogUtils
    3.纯注解形式 javacode04：未测试
      在javacode03的基础上，取消所有xml中的aop配置
      然后在任意一个类上面加注解：@EnableAspectJAutoProxy 这里我们加在了JsonUtils上

